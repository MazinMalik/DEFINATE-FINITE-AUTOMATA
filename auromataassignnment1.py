# -*- coding: utf-8 -*-
"""auromataassignnment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xx0_QkM1wdtBgEB2S-5IwsXinT4T-zdL
"""

import os
import numpy as np
import pandas as pd
class first_dfa:
    w = ''
    init_state = 0
    currr_state = 0
    acceptance = False

    def int(self):
        self.w = ''
        self.init_state = 0
        self.acceptance = False

    def constructor(self, w, i, c):
        self.w = w
        self.init_state = i
        self.currr_state = c


    def transition(self, letter, state):
        if state == 0:
            if letter == 0:
                state = 1
            elif letter == 1:
                state = 3
            else:
                print("unacceptable letter: ", letter)
        elif state == 1:
            if letter == 0:
                state = 0
            elif letter == 1:
                state = 2
            else:
                print("unacceptable letter: ", letter)
        elif state == 2:
            if letter == 0:
                state = 3
            elif letter == 1:
                state = 1
            else:
                print("unacceptable letter: ", letter)
        elif state == 3:
            if letter == 0:
                state = 2
            elif letter == 1:
                state = 0
            else:
                print("unacceptable letter: ", letter)
        return state

    def DFA_working(self, new):
        self.w = new
        for i in self.w:
            self.currr_state = self.transition(self,int(i), self.currr_state)

        if self.currr_state == 0:
            print("acceptance string: ", new,"\n")
        else:
            print("unacceptable string: ", new,"\n")


class second_dfa:
    w=' '
    init_state=0
    currr_state=0

    def _init_(self):
        self.w=' '
        self.init_state=0
    def constructor(self,w,i,c):
        self.w=w
        self.init_state=i
        self.currr_state = c


    def transitionfunction(self,letter,state):
        if state==0:
            if letter==0:
                state=3
            elif letter==1:
                state=1
            else:
                print("unacceptable letter: ", letter)

        elif state==1:
            if letter==0:
                state=1
            elif letter==1:
                state=2
            else:
                print("unacceptable letter: ", letter)

        elif state==2:
            if letter == 0:
                state = 2
            elif letter == 1:
                state = 2
            else:
                print("unacceptable letter: ", letter)

        elif state==3:
            if letter == 0:
                state = 4
            elif letter == 1:
                state = 3
            else:
                print("unacceptable letter: ", letter)

        elif state==4:
            if letter == 0:
                state = 4
            elif letter == 1:
                state = 4
            else:
                print("unacceptable letter: ", letter)

        return state

    def DFA_working(self,new):
        self.w = new
        for i in self.w:
            self.currr_state = self.transitionfunction(self,int(i), self.currr_state)
        if self.currr_state ==  2 or self.currr_state ==  4:
            print("acceptance string: ",new,"\n")
        else:
            print("unacceptable string: ",new,"\n")

class third_dfa:
    w=' '
    init_state=0
    final_state=0
    currr_state=0

    def _init_(self):
        self.w=' '
        self.init_state=0
        self.final_state=0
    def constructor(self,w,i,c,f):
        self.w=w
        self.init_state=i
        self.currr_state = c
        self.final_state=f

    def transitionfunction(self,letter,state):
        if state==0:
            if letter=='a':
                state=2
            elif letter=='b':
                state=2
            elif letter=='c':
                state=1
            else:
                print("unacceptable letter: ", letter)

        elif state==1:
            if letter=='a':
                state=3
            elif letter=='b':
                state=2
            elif letter=='c':
                state=2
            else:
                print("unacceptable letter: ", letter)

        elif state==2:
            if letter=='a':
                state=3
            elif letter=='b':
                state=3
            elif letter=='c':
                state=3
            else:
                print("unacceptable letter: ", letter)

        elif state==3:
            if letter=='a':
                state=3
            elif letter=='b':
                state=3
            elif letter=='c':
                state=3
            else:
                print("unacceptable letter: ", letter)

        return state

    def DFA_working(self,new):
        self.w = new
        for i in self.w:
            self.currr_state = self.transitionfunction(self,i, self.currr_state)
        if self.currr_state == self.final_state:
            print("acceptance string: ", new,"\n")
        else:
            print("unacceptable string: ", new,"\n")


df= pd.read_csv("words - Sheet1.csv")
dataframe=pd.DataFrame(df)
first_dfa()
second_dfa()
third_dfa()
while(1):
    print("PRESS 1 To CHECK FIRST DFA   ")
    print("PRESS 2 To CHECK SECOND DFA   ")
    print("PRESS 3 To CHECK THIRD DFA   ")
    print("PRESS 0 To EXIT              ")

    key = int(input("PRESS Here: "))

    if(key==1):
        for w in dataframe['DFA1']:
            first_dfa.constructor(first_dfa,str(w), 0,0)
            first_dfa.DFA_working(first_dfa,str(w))

    elif(key==2):

        for w in dataframe['DFA2']:
            second_dfa.constructor(second_dfa,str(w), 0,0)
            second_dfa.DFA_working(second_dfa, str(w))

    elif (key==3):
        for w in dataframe['DFA3']:
            third_dfa.constructor(third_dfa,w,0,0,2)
            third_dfa.DFA_working(third_dfa,w)


    elif(key==0):
        print("EXIT SUCCESSFUL")
        break

    else:
        print("ERROR")